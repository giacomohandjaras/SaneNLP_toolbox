function wordvectors_out=SNLP_getWordVectorsSmoothed(words, vocabulary, wordvectors, words_stem, vocabulary_stem, smooth)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%Given a set of words of interest (a cell N x 1), a large collection of words (a cell M x 1), a matrix representing word-embeddings
%%%%of all available words (M x D), the stemmed version of the words of interest (N x 1), the stemmed version of all available words (M x 1),
%%%%and a number representing smoothing intensity, the function returns the smoothed word-embeddings
%%%%for the words of interest
%%%%
%%%%Usage:
%%%%	wordvectors_out=SNLP_getWordVectorsSmoothed(words, vocabulary, wordvectors, words_stem, vocabulary_stem, smooth)
%%%%
%%%%	words: a cell N x 1, containing the words of interest
%%%%	vocabulary: all the available words (M x 1), describing the rows of the wordvectors matrix
%%%%	wordvectors: a numerical matrix (M x D), representing the weights generated by a NLP algorithm (e.g., word2vec)
%%%%	words_stem: a cell N x 1, containing the stemmed version of the words of interest
%%%%	vocabulary_stem: a cell M x 1, containing the stemmed version of the vocabulary
%%%%	smooth: a number which represents smoothing intensity (std of a Gaussian distribution centered on a cosine distance of 0)
%%%%
%%%%	wordvectors_out: the smoothed word-embeddings for the words of interest (N x D)
%%%%
%%%%
%%%%	Sane Natural Language Processing Toolkit, v0.01. https://github.com/giacomohandjaras/SaneNLP_toolbox
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

num_of_stim=numel(words);
columns=size(wordvectors,2);

wordvectors_out=nan(num_of_stim,columns);

for i=1:num_of_stim
    position_unique=find(strcmp(vocabulary,words(i)));
    
    if(numel(position_unique)>0)
        positions=find(strcmp(vocabulary_stem,words_stem(i)));
        
        if numel(positions)>1
            vectors_temp=wordvectors(positions,:);
            vectors_temp_unique=wordvectors(position_unique(1),:);
            vectors_temp_dist=pdist2(vectors_temp_unique,vectors_temp,'cosine');
            temp_dist_gauss=2-(cdf('norm',vectors_temp_dist,0,smooth)*2);
            temp_weight=vectors_temp.*temp_dist_gauss';
            wordvectors_out(i,:)=sum(temp_weight,1);
        else
            wordvectors_out(i,:)=wordvectors(position_unique(1),:);
        end
        
    end
    
end
end
